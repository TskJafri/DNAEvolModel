from ipy_oxdna.oxdna_simulation import Simulation
from pathlib import Path

import multiprocessing as mp
if __name__ == '__main__':
    mp.set_start_method('fork', force=True)

    # Use the evolved structure generated by the converter
    working_dir = Path("/Users/taskeenjafri/Projects/EvolModel/output/genalgo1")

    print("üß¨ Starting MC relaxation on evolved structure...")
    relax_mc = Simulation(working_dir, working_dir / "mc_relax")
    relax_mc.build()
    relax_mc.input["steps"] = 5000
    relax_mc.input["print_conf_interval"] = 500
    relax_mc.input["print_energy_interval"] = 500
    relax_mc.input.swap_default_input("cpu_MC_relax")
    relax_mc.input["T"] = "30C"
    relax_mc.input["box_type"] = "orthogonal"
    relax_mc.oxpy_run(join=True)

    print("‚úì MC relaxation completed!")

    print("üß¨ Starting MD relaxation...")
    relax_md = Simulation(working_dir / "mc_relax", working_dir / "md_relax")
    relax_md.build()
    relax_md.input.swap_default_input("cpu_MD_relax")
    relax_md.input["steps"] = 5000
    relax_md.input["print_conf_interval"] = 500
    relax_md.input["print_energy_interval"] = 500
    relax_md.input["print_energy_every"] = 500
    relax_md.input["T"] = "30C"
    relax_md.oat.generate_force()
    relax_md.input["box_type"] = "orthogonal"
    relax_md.oxpy_run(join=True)
    print("‚úì MD relaxation completed!")
    
    print("\nüéâ Complete relaxation pipeline finished!")
    print(f"üìÅ Results in: {working_dir}/mc_relax/ and {working_dir}/md_relax/")